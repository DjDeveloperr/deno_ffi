name: Release

on:
  push:
    tags: "*"

jobs:
  build:
    name: ${{ matrix.kind }} ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    timeout-minutes: 60
    strategy:
      matrix:
        os: [macOS-latest, windows-latest, ubuntu-latest]

    env:
      GH_ACTIONS: true
      RUST_BACKTRACE: full

    steps:
      - name: Checkout Repo
        uses: actions/checkout@v2

      - name: Install Deps
        if: matrix.os == 'macOS-latest'
        run: brew install autoconf automake libtool libffi

      - name: Setup Rust
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          override: true

      - name: Log versions
        run: |
          rustc --version
          cargo --version

      - name: Cache Cargo registry
        uses: actions/cache@v1
        with:
          path: ~/.cargo/registry
          key: ${{ runner.os }}-cargo-registry-${{ hashFiles('**/Cargo.lock') }}

      - name: Cache Cargo index
        uses: actions/cache@v1
        with:
          path: ~/.cargo/git
          key: ${{ runner.os }}-cargo-index-${{ hashFiles('**/Cargo.lock') }}

      - name: Cache Cargo build
        uses: actions/cache@v1
        with:
          path: target
          key: ${{ runner.os }}-cargo-build-target-${{ hashFiles('**/Cargo.lock') }}

      - name: Remove old cache
        if: matrix.os == 'windows-latest'
        run: |
          rm target/release/gn_root -Recurse -ErrorAction Ignore
          rm target/debug/gn_root -Recurse -ErrorAction Ignore
      - name: run cargo build
        uses: actions-rs/cargo@v1
        with:
          command: build
          args: --release

      - name: Get the version
        id: get_version
        run: echo ::set-output name=VERSION::${GITHUB_REF/refs\/tags\//}

      - name: Create release
        uses: softprops/action-gh-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.get_version.outputs.VERSION }}
          name: v${{ steps.get_version.outputs.VERSION }}
          draft: true
          files: |
            target/release/libdeno_ffi.dylib
            target/release/libdeno_ffi.so
            target/release/deno_ffi.dll
